public class HashTable {
	private LinkedList[] table = new LinkedList[10];
	
	public HashTable() {
		for(int i = 0; i < table.length; i++) {
			table[i] = new LinkedList();
		}
	}
	
	/*
	 * add function accepts integer as key. The keys are then hashed by the
	 * HashFunction method. Uses separate chaining as solution for the collisions. 
	 * The hash is displayed when adding new keys.
	 */
	public void add(int key) {
		int hash = hashFunction(key);
		System.out.println("Hash: " + hash);
		table[hash].append(new Node(key));
		
	}

	
	/*
	 * Shows the contents of the HashTable
	 * Starts the display with an arrow "->" if the list is not empty,
	 * otherwise it will display only the index.
	 */
	public void view() {	
		for (int i = 0; i < table.length; i++) {
			System.out.print(i + (table[i].isEmpty() == false ? " -> " : ""));
			table[i].display();
		}
	}
	
	/*
	 * Searches for a key in the Hash Table.
	 * THe hash is first computed by the hash function, the key is searched 
	 * in the list found at the hash.
	 * If found, the hash/index together with the key is displayed, a prompt will
	 * display if it was not found.
	 */

	public void search(int key) {
		int hash = hashFunction(key);
		if(table[hash].search(key)) {
			System.out.println("Index : " + hash + " Key : " + key);
		}else {
			System.out.println("Key does not exist in the hashtable.");
		}
			
	}
	
	/*
	 * Deletes a key in the Hash Table using the LinkedList class' delete function.
	 * The hash is computed by the hash function and the linked list at the hash is searched
	 * for the key.
	 * If it is found, it is deleted, else a prompt will show telling that it is not found.
	 */
	
	public void delete(int key) {
		int hash = hashFunction(key);
		table[hash].delete(key);
	}
	
	
	/*
	 * Used to compute the hash. Utilizes the modulo division method to create hash values.
	 * Returns the hash.
	 */
	private static int hashFunction(int key) {
		int hash = key % 10;
		return hash;
	}

}
