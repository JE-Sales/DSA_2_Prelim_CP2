public class LinkedList {
	private Node head;

	/*
	 * Method for adding a new node. If the linked list is empty, 
     * the new node will be the head of the list. 
     * If not, the new node will be added at the end of the list.
	 */ 
	public void append(Node node) {
		if (head == null) {
			head = node;
		} else {
			Node currentNode = head;
			while (currentNode.getNext() != null) {
				currentNode = currentNode.getNext();
			}
			currentNode.setNext(node);
		}
	}
	
	/*
	 *Searches for a key in the List
	 *Returns true if found, otherwise, it returns false
	 */
	public boolean search(int key) {
		Node currentNode = head;

		while (currentNode != null) {
			if (currentNode.getData() == key)
				return true;
			currentNode = currentNode.getNext();
		}
		return false;

	}
	
	/*
	 * Deletes a key in the list
	 * It first checks if the list is empty and then if the head node contains
	 * the key.
	 * If not found, the list is traversed to find the key.
	 * If it found, the key is deleted, otherwise a prompt will tell that the key
	 * is not found.
	 */
	public void delete(int key) {
		if(head == null) {
			System.out.println("The key is not found.");
			return;
		}
		if(head.getData() == key) {
			head = this.head.getNext();
			System.out.println("The key is successfully deleted.");
			return;
		}
		Node currentNode = head;
		while(currentNode.getNext() != null) {
			if(currentNode.getNext().getData() == key) {
				currentNode.setNext(currentNode.getNext().getNext());
				System.out.println("The key is successfully deleted.");
				return;
			}
			currentNode = currentNode.getNext();
		}
	}
	
	/*
	 * Displays the contents of the list
	 * Each key is segmented by the string " -> "
	 * A substring is made to remove the last unnecessary " -> ".
	 */
	public void display() {
		Node currentNode = head;
		String str = "";
		while (currentNode != null) {
			str += String.valueOf(currentNode.getData()) + " -> ";
			currentNode = currentNode.getNext();
		}
		if (str != "") {
			str = str.substring(0, str.length() - 4);
		}
		System.out.println(str);
	}
	
	/*
	 * Returns true if the list is empty (head == null)
	 * Otherwise, it returns false.
	 */
	public boolean isEmpty() {
		boolean isEmpty = true;
		if(this.head == null) {
			isEmpty = true;
		}else {
			isEmpty = false;
		}
		return isEmpty;
	}

}
